Grammar

    0 $accept: prog $end

    1 prog: %empty
    2     | prog struct
    3     | prog function

    4 struct: struct_opt '}'

    5 struct_opt: ID '{' var
    6           | struct_opt var

    7 function: ID function_type statement_lst

    8 function_type: function_type_param ':' type
    9              | function_type_param

   10 function_type_param: function_type_opt ')'
   11                    | '(' ')'

   12 function_type_opt: '(' var
   13                  | function_type_opt ',' var

   14 var: ID ':' type

   15 type: '*' type
   16     | U8
   17     | I8
   18     | U16
   19     | I16
   20     | U32
   21     | I32
   22     | U64
   23     | I64
   24     | F32
   25     | F64
   26     | VOID
   27     | ID

   28 statement_lst: statement_lst_opt '}'

   29 statement_lst_opt: '{'
   30                  | statement_lst_opt statement

   31 statement: ret_stm
   32          | brk_stm
   33          | con_stm
   34          | var_stm
   35          | conditional_stm
   36          | loop_stm
   37          | exp

   38 var_stm: var '=' exp
   39        | var

   40 conditional_stm: conditional_stm_opt ELSE exp statement_lst
   41                | conditional_stm_opt

   42 conditional_stm_opt: IF exp statement_lst
   43                    | conditional_stm_opt ELIF exp statement_lst

   44 loop_stm: WHILE exp statement_lst

   45 ret_stm: RET '(' exp ')'
   46        | RET

   47 brk_stm: BRK

   48 con_stm: CON

   49 exp: INTEGER
   50    | FLOAT
   51    | access_exp
   52    | call_exp
   53    | ID
   54    | '&' exp
   55    | '*' exp
   56    | cast_exp

   57 access_exp: ID '.' ID
   58           | ID '-' '>' ID
   59           | access_exp '.' ID
   60           | access_exp '-' '>' ID

   61 cast_exp: '<' type '>' exp

   62 call_exp: call_exp_opt ')'

   63 call_exp_opt: ID '('
   64             | call_exp_opt exp


Terminals, with rules where they appear

$end (0) 0
'&' (38) 54
'(' (40) 11 12 45 63
')' (41) 10 11 45 62
'*' (42) 15 55
',' (44) 13
'-' (45) 58 60
'.' (46) 57 59
':' (58) 8 14
'<' (60) 61
'=' (61) 38
'>' (62) 58 60 61
'{' (123) 5 29
'}' (125) 4 28
error (256)
ID (258) 5 7 14 27 53 57 58 59 60 63
IF (259) 42
BRK (260) 47
CON (261) 48
RET (262) 45 46
WHILE (263) 44
ELIF (264) 43
ELSE (265) 40
FLOAT (266) 50
INTEGER (267) 49
VOID (268) 26
U8 (269) 16
I8 (270) 17
I16 (271) 19
U16 (272) 18
I32 (273) 21
U32 (274) 20
I64 (275) 23
U64 (276) 22
F32 (277) 24
F64 (278) 25


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
prog (38)
    on left: 1 2 3, on right: 0 2 3
struct (39)
    on left: 4, on right: 2
struct_opt (40)
    on left: 5 6, on right: 4 6
function (41)
    on left: 7, on right: 3
function_type (42)
    on left: 8 9, on right: 7
function_type_param (43)
    on left: 10 11, on right: 8 9
function_type_opt (44)
    on left: 12 13, on right: 10 13
var (45)
    on left: 14, on right: 5 6 12 13 38 39
type (46)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27, on right: 8 14
    15 61
statement_lst (47)
    on left: 28, on right: 7 40 42 43 44
statement_lst_opt (48)
    on left: 29 30, on right: 28 30
statement (49)
    on left: 31 32 33 34 35 36 37, on right: 30
var_stm (50)
    on left: 38 39, on right: 34
conditional_stm (51)
    on left: 40 41, on right: 35
conditional_stm_opt (52)
    on left: 42 43, on right: 40 41 43
loop_stm (53)
    on left: 44, on right: 36
ret_stm (54)
    on left: 45 46, on right: 31
brk_stm (55)
    on left: 47, on right: 32
con_stm (56)
    on left: 48, on right: 33
exp (57)
    on left: 49 50 51 52 53 54 55 56, on right: 37 38 40 42 43 44 45
    54 55 61 64
access_exp (58)
    on left: 57 58 59 60, on right: 51 59 60
cast_exp (59)
    on left: 61, on right: 56
call_exp (60)
    on left: 62, on right: 52
call_exp_opt (61)
    on left: 63 64, on right: 62 64


State 0

    0 $accept: . prog $end

    $default  reduce using rule 1 (prog)

    prog  go to state 1


State 1

    0 $accept: prog . $end
    2 prog: prog . struct
    3     | prog . function

    $end  shift, and go to state 2
    ID    shift, and go to state 3

    struct      go to state 4
    struct_opt  go to state 5
    function    go to state 6


State 2

    0 $accept: prog $end .

    $default  accept


State 3

    5 struct_opt: ID . '{' var
    7 function: ID . function_type statement_lst

    '{'  shift, and go to state 7
    '('  shift, and go to state 8

    function_type        go to state 9
    function_type_param  go to state 10
    function_type_opt    go to state 11


State 4

    2 prog: prog struct .

    $default  reduce using rule 2 (prog)


State 5

    4 struct: struct_opt . '}'
    6 struct_opt: struct_opt . var

    ID   shift, and go to state 12
    '}'  shift, and go to state 13

    var  go to state 14


State 6

    3 prog: prog function .

    $default  reduce using rule 3 (prog)


State 7

    5 struct_opt: ID '{' . var

    ID  shift, and go to state 12

    var  go to state 15


State 8

   11 function_type_param: '(' . ')'
   12 function_type_opt: '(' . var

    ID   shift, and go to state 12
    ')'  shift, and go to state 16

    var  go to state 17


State 9

    7 function: ID function_type . statement_lst

    '{'  shift, and go to state 18

    statement_lst      go to state 19
    statement_lst_opt  go to state 20


State 10

    8 function_type: function_type_param . ':' type
    9              | function_type_param .

    ':'  shift, and go to state 21

    $default  reduce using rule 9 (function_type)


State 11

   10 function_type_param: function_type_opt . ')'
   13 function_type_opt: function_type_opt . ',' var

    ')'  shift, and go to state 22
    ','  shift, and go to state 23


State 12

   14 var: ID . ':' type

    ':'  shift, and go to state 24


State 13

    4 struct: struct_opt '}' .

    $default  reduce using rule 4 (struct)


State 14

    6 struct_opt: struct_opt var .

    $default  reduce using rule 6 (struct_opt)


State 15

    5 struct_opt: ID '{' var .

    $default  reduce using rule 5 (struct_opt)


State 16

   11 function_type_param: '(' ')' .

    $default  reduce using rule 11 (function_type_param)


State 17

   12 function_type_opt: '(' var .

    $default  reduce using rule 12 (function_type_opt)


State 18

   29 statement_lst_opt: '{' .

    $default  reduce using rule 29 (statement_lst_opt)


State 19

    7 function: ID function_type statement_lst .

    $default  reduce using rule 7 (function)


State 20

   28 statement_lst: statement_lst_opt . '}'
   30 statement_lst_opt: statement_lst_opt . statement

    ID       shift, and go to state 25
    IF       shift, and go to state 26
    BRK      shift, and go to state 27
    CON      shift, and go to state 28
    RET      shift, and go to state 29
    WHILE    shift, and go to state 30
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '}'      shift, and go to state 33
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    var                  go to state 37
    statement            go to state 38
    var_stm              go to state 39
    conditional_stm      go to state 40
    conditional_stm_opt  go to state 41
    loop_stm             go to state 42
    ret_stm              go to state 43
    brk_stm              go to state 44
    con_stm              go to state 45
    exp                  go to state 46
    access_exp           go to state 47
    cast_exp             go to state 48
    call_exp             go to state 49
    call_exp_opt         go to state 50


State 21

    8 function_type: function_type_param ':' . type

    ID    shift, and go to state 51
    VOID  shift, and go to state 52
    U8    shift, and go to state 53
    I8    shift, and go to state 54
    I16   shift, and go to state 55
    U16   shift, and go to state 56
    I32   shift, and go to state 57
    U32   shift, and go to state 58
    I64   shift, and go to state 59
    U64   shift, and go to state 60
    F32   shift, and go to state 61
    F64   shift, and go to state 62
    '*'   shift, and go to state 63

    type  go to state 64


State 22

   10 function_type_param: function_type_opt ')' .

    $default  reduce using rule 10 (function_type_param)


State 23

   13 function_type_opt: function_type_opt ',' . var

    ID  shift, and go to state 12

    var  go to state 65


State 24

   14 var: ID ':' . type

    ID    shift, and go to state 51
    VOID  shift, and go to state 52
    U8    shift, and go to state 53
    I8    shift, and go to state 54
    I16   shift, and go to state 55
    U16   shift, and go to state 56
    I32   shift, and go to state 57
    U32   shift, and go to state 58
    I64   shift, and go to state 59
    U64   shift, and go to state 60
    F32   shift, and go to state 61
    F64   shift, and go to state 62
    '*'   shift, and go to state 63

    type  go to state 66


State 25

   14 var: ID . ':' type
   53 exp: ID .
   57 access_exp: ID . '.' ID
   58           | ID . '-' '>' ID
   63 call_exp_opt: ID . '('

    ':'  shift, and go to state 24
    '('  shift, and go to state 67
    '.'  shift, and go to state 68
    '-'  shift, and go to state 69

    $default  reduce using rule 53 (exp)


State 26

   42 conditional_stm_opt: IF . exp statement_lst

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 71
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 27

   47 brk_stm: BRK .

    $default  reduce using rule 47 (brk_stm)


State 28

   48 con_stm: CON .

    $default  reduce using rule 48 (con_stm)


State 29

   45 ret_stm: RET . '(' exp ')'
   46        | RET .

    '('  shift, and go to state 72

    $default  reduce using rule 46 (ret_stm)


State 30

   44 loop_stm: WHILE . exp statement_lst

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 73
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 31

   50 exp: FLOAT .

    $default  reduce using rule 50 (exp)


State 32

   49 exp: INTEGER .

    $default  reduce using rule 49 (exp)


State 33

   28 statement_lst: statement_lst_opt '}' .

    $default  reduce using rule 28 (statement_lst)


State 34

   55 exp: '*' . exp

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 74
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 35

   54 exp: '&' . exp

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 75
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 36

   61 cast_exp: '<' . type '>' exp

    ID    shift, and go to state 51
    VOID  shift, and go to state 52
    U8    shift, and go to state 53
    I8    shift, and go to state 54
    I16   shift, and go to state 55
    U16   shift, and go to state 56
    I32   shift, and go to state 57
    U32   shift, and go to state 58
    I64   shift, and go to state 59
    U64   shift, and go to state 60
    F32   shift, and go to state 61
    F64   shift, and go to state 62
    '*'   shift, and go to state 63

    type  go to state 76


State 37

   38 var_stm: var . '=' exp
   39        | var .

    '='  shift, and go to state 77

    $default  reduce using rule 39 (var_stm)


State 38

   30 statement_lst_opt: statement_lst_opt statement .

    $default  reduce using rule 30 (statement_lst_opt)


State 39

   34 statement: var_stm .

    $default  reduce using rule 34 (statement)


State 40

   35 statement: conditional_stm .

    $default  reduce using rule 35 (statement)


State 41

   40 conditional_stm: conditional_stm_opt . ELSE exp statement_lst
   41                | conditional_stm_opt .
   43 conditional_stm_opt: conditional_stm_opt . ELIF exp statement_lst

    ELIF  shift, and go to state 78
    ELSE  shift, and go to state 79

    $default  reduce using rule 41 (conditional_stm)


State 42

   36 statement: loop_stm .

    $default  reduce using rule 36 (statement)


State 43

   31 statement: ret_stm .

    $default  reduce using rule 31 (statement)


State 44

   32 statement: brk_stm .

    $default  reduce using rule 32 (statement)


State 45

   33 statement: con_stm .

    $default  reduce using rule 33 (statement)


State 46

   37 statement: exp .

    $default  reduce using rule 37 (statement)


State 47

   51 exp: access_exp .
   59 access_exp: access_exp . '.' ID
   60           | access_exp . '-' '>' ID

    '.'  shift, and go to state 80
    '-'  shift, and go to state 81

    $default  reduce using rule 51 (exp)


State 48

   56 exp: cast_exp .

    $default  reduce using rule 56 (exp)


State 49

   52 exp: call_exp .

    $default  reduce using rule 52 (exp)


State 50

   62 call_exp: call_exp_opt . ')'
   64 call_exp_opt: call_exp_opt . exp

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    ')'      shift, and go to state 82
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 83
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 51

   27 type: ID .

    $default  reduce using rule 27 (type)


State 52

   26 type: VOID .

    $default  reduce using rule 26 (type)


State 53

   16 type: U8 .

    $default  reduce using rule 16 (type)


State 54

   17 type: I8 .

    $default  reduce using rule 17 (type)


State 55

   19 type: I16 .

    $default  reduce using rule 19 (type)


State 56

   18 type: U16 .

    $default  reduce using rule 18 (type)


State 57

   21 type: I32 .

    $default  reduce using rule 21 (type)


State 58

   20 type: U32 .

    $default  reduce using rule 20 (type)


State 59

   23 type: I64 .

    $default  reduce using rule 23 (type)


State 60

   22 type: U64 .

    $default  reduce using rule 22 (type)


State 61

   24 type: F32 .

    $default  reduce using rule 24 (type)


State 62

   25 type: F64 .

    $default  reduce using rule 25 (type)


State 63

   15 type: '*' . type

    ID    shift, and go to state 51
    VOID  shift, and go to state 52
    U8    shift, and go to state 53
    I8    shift, and go to state 54
    I16   shift, and go to state 55
    U16   shift, and go to state 56
    I32   shift, and go to state 57
    U32   shift, and go to state 58
    I64   shift, and go to state 59
    U64   shift, and go to state 60
    F32   shift, and go to state 61
    F64   shift, and go to state 62
    '*'   shift, and go to state 63

    type  go to state 84


State 64

    8 function_type: function_type_param ':' type .

    $default  reduce using rule 8 (function_type)


State 65

   13 function_type_opt: function_type_opt ',' var .

    $default  reduce using rule 13 (function_type_opt)


State 66

   14 var: ID ':' type .

    $default  reduce using rule 14 (var)


State 67

   63 call_exp_opt: ID '(' .

    $default  reduce using rule 63 (call_exp_opt)


State 68

   57 access_exp: ID '.' . ID

    ID  shift, and go to state 85


State 69

   58 access_exp: ID '-' . '>' ID

    '>'  shift, and go to state 86


State 70

   53 exp: ID .
   57 access_exp: ID . '.' ID
   58           | ID . '-' '>' ID
   63 call_exp_opt: ID . '('

    '('  shift, and go to state 67
    '.'  shift, and go to state 68
    '-'  shift, and go to state 69

    $default  reduce using rule 53 (exp)


State 71

   42 conditional_stm_opt: IF exp . statement_lst

    '{'  shift, and go to state 18

    statement_lst      go to state 87
    statement_lst_opt  go to state 20


State 72

   45 ret_stm: RET '(' . exp ')'

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 88
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 73

   44 loop_stm: WHILE exp . statement_lst

    '{'  shift, and go to state 18

    statement_lst      go to state 89
    statement_lst_opt  go to state 20


State 74

   55 exp: '*' exp .

    $default  reduce using rule 55 (exp)


State 75

   54 exp: '&' exp .

    $default  reduce using rule 54 (exp)


State 76

   61 cast_exp: '<' type . '>' exp

    '>'  shift, and go to state 90


State 77

   38 var_stm: var '=' . exp

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 91
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 78

   43 conditional_stm_opt: conditional_stm_opt ELIF . exp statement_lst

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 92
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 79

   40 conditional_stm: conditional_stm_opt ELSE . exp statement_lst

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 93
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 80

   59 access_exp: access_exp '.' . ID

    ID  shift, and go to state 94


State 81

   60 access_exp: access_exp '-' . '>' ID

    '>'  shift, and go to state 95


State 82

   62 call_exp: call_exp_opt ')' .

    $default  reduce using rule 62 (call_exp)


State 83

   64 call_exp_opt: call_exp_opt exp .

    $default  reduce using rule 64 (call_exp_opt)


State 84

   15 type: '*' type .

    $default  reduce using rule 15 (type)


State 85

   57 access_exp: ID '.' ID .

    $default  reduce using rule 57 (access_exp)


State 86

   58 access_exp: ID '-' '>' . ID

    ID  shift, and go to state 96


State 87

   42 conditional_stm_opt: IF exp statement_lst .

    $default  reduce using rule 42 (conditional_stm_opt)


State 88

   45 ret_stm: RET '(' exp . ')'

    ')'  shift, and go to state 97


State 89

   44 loop_stm: WHILE exp statement_lst .

    $default  reduce using rule 44 (loop_stm)


State 90

   61 cast_exp: '<' type '>' . exp

    ID       shift, and go to state 70
    FLOAT    shift, and go to state 31
    INTEGER  shift, and go to state 32
    '*'      shift, and go to state 34
    '&'      shift, and go to state 35
    '<'      shift, and go to state 36

    exp           go to state 98
    access_exp    go to state 47
    cast_exp      go to state 48
    call_exp      go to state 49
    call_exp_opt  go to state 50


State 91

   38 var_stm: var '=' exp .

    $default  reduce using rule 38 (var_stm)


State 92

   43 conditional_stm_opt: conditional_stm_opt ELIF exp . statement_lst

    '{'  shift, and go to state 18

    statement_lst      go to state 99
    statement_lst_opt  go to state 20


State 93

   40 conditional_stm: conditional_stm_opt ELSE exp . statement_lst

    '{'  shift, and go to state 18

    statement_lst      go to state 100
    statement_lst_opt  go to state 20


State 94

   59 access_exp: access_exp '.' ID .

    $default  reduce using rule 59 (access_exp)


State 95

   60 access_exp: access_exp '-' '>' . ID

    ID  shift, and go to state 101


State 96

   58 access_exp: ID '-' '>' ID .

    $default  reduce using rule 58 (access_exp)


State 97

   45 ret_stm: RET '(' exp ')' .

    $default  reduce using rule 45 (ret_stm)


State 98

   61 cast_exp: '<' type '>' exp .

    $default  reduce using rule 61 (cast_exp)


State 99

   43 conditional_stm_opt: conditional_stm_opt ELIF exp statement_lst .

    $default  reduce using rule 43 (conditional_stm_opt)


State 100

   40 conditional_stm: conditional_stm_opt ELSE exp statement_lst .

    $default  reduce using rule 40 (conditional_stm)


State 101

   60 access_exp: access_exp '-' '>' ID .

    $default  reduce using rule 60 (access_exp)
